import { LitElement, html, css } from 'lit-element';
import { overlaysRange, overlaysId } from 'overlays';
import { overlays } from 'overlays/instance.js';

import { singletonManager } from 'singleton-manager';

export class PageB extends LitElement {
  connectedCallback() {
    super.connectedCallback();
    this.overlays = getInstance([overlaysId, overlaysRange], () => overlays);
  }

  static get styles() {
    return css`
      :host {
        display: block;
        padding: 10px;
        border: 2px solid #ccc;
      }
    `;
  }

  render() {
    return html`
      <h3>I am page B</h3>
      <p>Overlays Status:</p>
      <p>Name: ${this.overlays.name}</p>
      <p>Blocked: ${this.overlays.blockBody}</p>
      <button @click=${() => {
        this.overlays.blockingBody(); this.requestUpdate();
      }}>block</button>
      <button @click=${() => {
        this.overlays.unBlockingBody(); this.requestUpdate();
      }}>un-block</button>
      <button @click=${() => {
        this.requestUpdate();
      }}>refresh</button>
    `;
  }
}

customElements.define('page-b', PageB);


function getInstance(keys, fallback, node) {
  if (node) {
    const ev = new CustomEvent('request-instance', {
      detail: { key },
      bubbles: true,
      cancelable: true,
      composed: true,
    });
    this.dispatchEvent(ev);
    return ev.detail.instance || fallback();
  }
  for (key of keys) {
    if (singletonManager.has(key)) {
      return 
    }
  }
  return fallback();
  return singletonManager.get(key) || fallback();
}
