const fs = require('fs');
const path = require('path');

// Define the directory where flag SVG JavaScript files are located
const flagsDirectory = path.join(__dirname, '../packages/ui/components/input-tel/flag-svgs-js');
// Define the output file path for the aggregated flag exports
const flagsExportFile = path.join(__dirname, '../packages/ui/exports/flag-exports.js');

// Read the directory containing the flag SVG JavaScript files
fs.readdir(flagsDirectory, (err, files) => {
  if (err) {
    console.error('Error reading the flags directory:', err);
    // TODO: Consider halting execution or adding more robust error handling here
    return;
  }

  // Start with an explanatory comment for the auto-generated file
  let exportsContent = `// This is an auto-generated file containing flag exports.
// It is generated by updateFlagExports.js script and should not be edited manually.\n\n`;

  // Generate export statements for each flag module
  exportsContent += files
    .filter(file => file.endsWith('.js'))
    .map(file => {
      const moduleName = path.basename(file, '.js');
      return `export { default as ${moduleName}Flag } from '../components/input-tel/flag-svgs-js/${moduleName}.js';`;
    })
    .join('\n');

  // Write the export statements to the flag-exports.js file
  fs.writeFileSync(flagsExportFile, exportsContent, 'utf8');
  console.log(`Flag exports have been written to ${flagsExportFile}`);

  // TODO: Backup the previous version of flag-exports.js before overwriting
  // TODO: Ensure this script is executed as part of the build process when new flags are added
  // TODO: If flag-exports.js is tracked in version control, consider ignoring it in .gitignore and generate only during the build process
  // TODO: Test the application after running this script to ensure flag SVGs are imported and rendered correctly
});
