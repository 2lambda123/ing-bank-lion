---
import MainLayout from '../../layouts/MainLayout.astro';
import * as path from 'path';
import { fundamentalsEntries, componentPageEntries } from '../../content';
import { blogEntries } from '../../content';
import { guideEntries } from '../../content';
import * as fs from 'fs';

const maxDepthForNonComponentsNavigation = 3;
let entries = [];
let pages = [];


export async function getStaticPaths() {
  const fundamentalsArr = fundamentalsEntries.map(entry => ({
    params: { 
      top: 'fundamentals',
      slug: entry.slug.split('fundamentals/')[1] 
    },
    props: { entry },
  }));

  const blogArr = blogEntries.map(entry => ({
    params: { 
      top: 'blog',
      slug: entry.slug.split('blog/')[1] 
    },
    props: { entry },
  }));

  const guideArr = guideEntries .map(entry => ({
    params: { 
      top: 'guides',
      slug: entry.slug.split('guides/')[1] 
    },
    props: { entry },
  }));

  return [...fundamentalsArr, ...blogArr, ...guideArr];
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const blogData = Astro.props.entry.data;

const inPageNavData = [];

const convertHeadingsToInPageNavData = (headings, componentSlug) => {
  return headings.map(header => ({
      name: header.text,
      url: `/${path.dirname(componentSlug)}#${header.slug}`
    }));
};

const getEntryMetaInfo = async (entry) => {
  const result = {};
  const { Content, headings, remarkPluginFrontmatter } = await entry.render();
  const order = remarkPluginFrontmatter.order;
  const slug = entry.slug;
  const headersH2 = headings.filter(header => header.depth === 2);
  const entryInPageNavData = convertHeadingsToInPageNavData(headersH2, slug)[0];
  const headersH3 = headings.filter(header => header.depth === 3);
  console.log('entryInPageNavData: ', entryInPageNavData);
  entryInPageNavData.children = convertHeadingsToInPageNavData(headersH3, slug);
  return {Content, entryInPageNavData}  
};

const parseEntries = async (entries) => {
  const contents = [];
  for (const componentEntry of entries) {
    const { Content, headings, remarkPluginFrontmatter } = await componentEntry.render();
    const order = remarkPluginFrontmatter.order;
    const slug = componentEntry.slug;
    contents.push({Content, headings, order, slug});    
  }
  return contents;
};

const updateHeadings = (contentItems) => {
  for (const contentItem of contentItems) {
    const headersH2 = contentItem.headings.filter(header => header.depth === 2);
    const entryInPageNavData = convertHeadingsToInPageNavData(headersH2, contentItem.slug)[0];
    const headersH3 = contentItem.headings.filter(header => header.depth === 3);
    console.log('entryInPageNavData: ', entryInPageNavData);
    entryInPageNavData.children = convertHeadingsToInPageNavData(headersH3, contentItem.slug);
    inPageNavData.push(entryInPageNavData);
  }
};

async function concatenateEntries(entries) {
  const contents = await parseEntries(entries);
  contents.sort((a, b) => a.order < b.order ? -1 : 1);
  updateHeadings(contents);
  return contents;
}

const getChildEntries = (entry) => {
  const dirname = path.dirname(entry.slug);  
  return componentPageEntries.filter(childEntry => childEntry.slug.startsWith(dirname));
};


let entryMetaInfo;
if (entry.slug.split('/').length === maxDepthForNonComponentsNavigation) {
  entries = getChildEntries(entry);
  if (entries.length === 0) {
    entryMetaInfo = await getEntryMetaInfo(entry);
  }
  pages = await concatenateEntries(entries);
}

const getPathMdjsStroriesFile = (entry) => {
  const mdjsStroriesFileDirectory = path.dirname(entry.slug);
  return `/docs/${mdjsStroriesFileDirectory}/__mdjs-stories.js`;
}

const filename = 'public/test.txt';
//fs.writeFileSync(filename, 'test1', 'utf8');
---

<MainLayout title={entry.slug}>
  {blogData.title}
  {blogData.description}
  {blogData.date}
  {blogData.tags}
  {blogData.author}
  {
    entries.length ? pages.map((page) => (
        <page.Content />        
    )) : <entryMetaInfo.Content />
  }
  <script is:inline src="/docs/_assets/scoped-custom-element-registry.min.js"></script>
  <script type="module" src={getPathMdjsStroriesFile(entry)} mdjs-setup></script>
</MainLayout>
